<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on musings about silly things</title>
    <link>http://heiber.im/post/</link>
    <description>Recent content in Posts on musings about silly things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hello@heiber.im (Moritz Heiber)</managingEditor>
    <webMaster>hello@heiber.im (Moritz Heiber)</webMaster>
    <lastBuildDate>Sun, 10 May 2015 20:12:10 +0200</lastBuildDate>
    <atom:link href="http://heiber.im/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Switching to Hugo</title>
      <link>http://heiber.im/post/switching-to-hugo/</link>
      <pubDate>Sun, 10 May 2015 20:12:10 +0200</pubDate>
      <author>hello@heiber.im (Moritz Heiber)</author>
      <guid>http://heiber.im/post/switching-to-hugo/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is a static site generator written in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt;. It&amp;rsquo;s incredibly fast and flexible, has a unique template engine, and writing themes is really easy, should the slew of available themes not be to your liking. I decided to use it because it lets me get rid of all the dependencies &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; came with, it had a comprehensive preview mechanism (&lt;code&gt;hugo server&lt;/code&gt;) and it allowed for a very narrow deployment pipeline to &lt;a href=&#34;http://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt;, where this site is hosted at. Coincidentally, this is also why it doesn&amp;rsquo;t offer TLS supports.&lt;/p&gt;

&lt;p&gt;So without further ado, here are some instructions on how to get a Hugo site of your own, hosted on GitHub, for free!&lt;/p&gt;

&lt;h2 id=&#34;installing-hugo:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Installing Hugo&lt;/h2&gt;

&lt;p&gt;Since Hugo is written in Go downloading and installing it can be as easy as pulling the individual binary and shoving it into the right place in your &lt;code&gt;$PATH&lt;/code&gt;. Just go to their &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;release website&lt;/a&gt; and take your pick. I used the &lt;code&gt;_amd64.deb&lt;/code&gt; since I&amp;rsquo;m running Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/spf13/hugo/releases/download/v0.13/hugo_0.13_amd64.deb
$ dpkg -i hugo_0.13_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install &lt;code&gt;hugo&lt;/code&gt; to &lt;code&gt;/usr/bin&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dpkg -L hugo
/usr/bin/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, you can also pull down the sources (via git or by downloading the zip file) and compile your own binary. &lt;a href=&#34;http://gohugo.io/overview/installing#installing-from-source&#34;&gt;There are detailed instructions on Hugo&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-your-new-hugo-site:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Creating your new Hugo site&lt;/h2&gt;

&lt;p&gt;To set up the Hugo scaffolding for your new site all you need to run is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new site &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your directory in &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls
archetypes  config.toml  content  data  layouts  static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo uses &lt;code&gt;toml&lt;/code&gt; as its configuration syntax by default. However, you can also use &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;json&lt;/code&gt; if you prefer either of those. The few directories carry a certain significance since taxonomy in Hugo is based on its directory structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/content/archetypes/&#34;&gt;archetypes&lt;/a&gt;: This contains the default definitions for new content. You can add things like &lt;code&gt;tags&lt;/code&gt; or &lt;code&gt;categories&lt;/code&gt; here.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/content/organization/&#34;&gt;content&lt;/a&gt;: Here is where all your content goes. This means regular pages or, nested in directories, posts, categories etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/extras/datafiles/&#34;&gt;data&lt;/a&gt;: You can store a poor man&amp;rsquo;s database in here and reference it right in your templates and pages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/overview/&#34;&gt;layouts&lt;/a&gt;: Relevant site layouts can be found in here. Usually, those would be provided by themes you&amp;rsquo;re using.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;: Any content you don&amp;rsquo;t need to have touched by Hugo but want to use on your website goes in here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the &lt;code&gt;config.toml&lt;/code&gt; is where you main site configuration is stored. For my site it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Your website URL
baseurl = &amp;quot;http://heiber.im&amp;quot;  
# The language you&#39;re using on it
languageCode = &amp;quot;en-us&amp;quot;  
# The main title of your website
title = &amp;quot;musings about silly things&amp;quot;  
# This should be here if you plan on using GitHub Pages
canonifyurls = true
# This is the editor Hugo calls upon when you run &amp;quot;hugo new post/something.md&amp;quot;
editor = &amp;quot;vim&amp;quot; 
# [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can take a look at the current file &lt;a href=&#34;https://github.com/moritzheiber/huge-blog-website/blob/master/config.toml&#34;&gt;on GitHub&lt;/a&gt;. There are also a lot of theme dependent variables in there, which you can use pretty much anywhere in your layouts, theme definitions and content. &lt;a href=&#34;http://gohugo.io/templates/variables/&#34;&gt;There&amp;rsquo;s a whole section on template variables in the docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;grab-a-theme-you-like:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Grab a theme you like&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;separate repository containing a lot of diverse and different themes&lt;/a&gt;. As of this moment there isn&amp;rsquo;t a comprehensive overview of the available themes accessible yet, however, there&amp;rsquo;s &lt;a href=&#34;https://github.com/spf13/hugoThemes/issues/35&#34;&gt;a ticket in GitHub which you can follow&lt;/a&gt; about finally getting a site up and running for exactly that purpose.&lt;/p&gt;

&lt;p&gt;There are two ways of still giving them a try/taking a peek:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each theme should contain a screenshot of it&amp;rsquo;s whole glory in the &lt;code&gt;images/&lt;/code&gt; directory. If it doesn&amp;rsquo;t consider filing an issue.&lt;/li&gt;
&lt;li&gt;You can use the instructions mentioned in the &lt;code&gt;README.md&lt;/code&gt; to clone all of the available themes in the repository and then run &lt;code&gt;hugo server -t &amp;lt;theme-name&amp;gt;&lt;/code&gt; in order to try out each theme with your newly created blog&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;start-creating-content:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Start creating content!&lt;/h2&gt;

&lt;p&gt;Now just run &lt;code&gt;hugo new post/new-first-post.md&lt;/code&gt; and have at it! If you want to see your changes appear incrementally you can run &lt;code&gt;hugo -w&lt;/code&gt; (&lt;code&gt;-w&lt;/code&gt; for &amp;ldquo;watch for changes&amp;rdquo;) in another window and navigate to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Especially with complicated markdown formatting this is a huge timesaver.&lt;/p&gt;

&lt;h2 id=&#34;push-it-to-the-web:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Push it to the web&lt;/h2&gt;

&lt;p&gt;After you&amp;rsquo;re done just run &lt;code&gt;hugo&lt;/code&gt; once in the blog&amp;rsquo;s directory. Mind your theme choice; you can use &lt;code&gt;-t &amp;lt;theme-name&amp;gt;&lt;/code&gt; if you haven&amp;rsquo;t added it to the configuration.&lt;/p&gt;

&lt;p&gt;Your statically created site is now ready for consumption in &lt;code&gt;public/&lt;/code&gt;. You can upload it anywhere you so desire. I personally host my website on GitHub Pages. There&amp;rsquo;s &lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;a chapter on it in the Hugo docs&lt;/a&gt;. Just make sure to use the right method of branching/pushing, i.e. personal websites do not use a &lt;code&gt;gh-pages&lt;/code&gt; branch but rather &lt;code&gt;master&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a &lt;code&gt;deploy.sh&lt;/code&gt; script which alleviates some of pain in the repetitive tasks you need to repeat in order to get your site onto GitHub Pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

GIT_URL=&amp;quot;git@github.com:moritzheiber/moritzheiber.github.io.git&amp;quot;
GIT_BRANCH=&amp;quot;master&amp;quot;

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

push_git () {
  msg=&amp;quot;Rebuilding site `date`&amp;quot;
  if [ $# -eq 1 ] ; then 
    msg=&amp;quot;$1&amp;quot;
  fi
  
  # Commit changes.
  git commit -m &amp;quot;$msg&amp;quot;

  # Push source and build repos.
  git push origin master
  git subtree push --prefix public ${GIT_URL} ${GIT_BRANCH}
}

# Build the project. 
hugo -t hyde-x

# Add changes to git.
git add --all
git diff --staged --stat

while true; do
    read -p &amp;quot;Do you wish to push these changes? &amp;quot; yn
    case $yn in
        [Yy]* ) push_git; break;;
        [Nn]* ) exit;;
        * ) echo &amp;quot;Please answer yes or no.&amp;quot;;;
    esac
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Builds the current state of the site using &lt;code&gt;hugo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Adds all the changes to the git index and stages them.&lt;/li&gt;
&lt;li&gt;Gives you a brief overview of what they actually are.&lt;/li&gt;
&lt;li&gt;Asks you to accept these changes.&lt;/li&gt;
&lt;li&gt;Commits the changes, either using a provided messages (i.e. &lt;code&gt;./deploy.sh &amp;quot;your message here&amp;quot;&lt;/code&gt;) or a timestamped default.&lt;/li&gt;
&lt;li&gt;Pushes the changes to the main repository, also holding the &lt;code&gt;hugo&lt;/code&gt; codebase.&lt;/li&gt;
&lt;li&gt;Pushes just the content in &lt;code&gt;public/&lt;/code&gt; to a separate repository, using the &lt;code&gt;master&lt;/code&gt; branch, so that it gets picked up by GitHub Pages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it. Your changes are now online.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;If you see a go backtrace at any point in time and you don&amp;rsquo;t happen to have any content in your blog yet it could be you&amp;rsquo;ve chosen a theme that relies on content to build certain parts of the site i.e. certain variables and/or content snippets. You should be fine once you&amp;rsquo;ve created more than or equal to one post/page.&lt;/p&gt;

&lt;h2 id=&#34;further-reading:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;Hugo is very well documented, literally anything you desire can either by found &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;in the docs&lt;/a&gt; or on &lt;a href=&#34;http://discuss.gohugo.io/&#34;&gt;their buzzing forums&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:536c0d2c3e7d958cd4c405a28a07ba8a&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I couldn&amp;rsquo;t be happier with the setup at the moment. Right now, creating new posts is just about running &lt;code&gt;hugo new post/&amp;lt;post&amp;gt;.md&lt;/code&gt;, adding my content and then &lt;code&gt;./deploy.sh&lt;/code&gt;. After that it&amp;rsquo;s online. Two simple steps.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s much easier and more seamless as it was before. I&amp;rsquo;m sorry to be moving away from such an accomplished project as Jekyll, but maintaining Jekyll and it&amp;rsquo;s dependencies just isn&amp;rsquo;t what I&amp;rsquo;m after and &lt;a href=&#34;http://www.octopress.org&#34;&gt;Octopress 3.0&lt;/a&gt; isn&amp;rsquo;t ready yet.&lt;/p&gt;

&lt;p&gt;For the time being, here&amp;rsquo;s to a bright future using &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dynamics DNS with pfSense and Route53</title>
      <link>http://heiber.im/post/dynamics-dns-with-pfsense-and-route53/</link>
      <pubDate>Fri, 28 Feb 2014 12:17:36 +0100</pubDate>
      <author>hello@heiber.im (Moritz Heiber)</author>
      <guid>http://heiber.im/post/dynamics-dns-with-pfsense-and-route53/</guid>
      <description>&lt;p&gt;The quite excellent &lt;a href=&#34;https://pfsense.org&#34;&gt;pfSense&lt;/a&gt; comes with a &lt;a href=&#34;http://en.wikipedia.org/wiki/Dynamic_DNS&#34;&gt;dynamic DNS&lt;/a&gt; plugin for &lt;a href=&#34;http://aws.amazon.com/route53/&#34;&gt;Amazon&amp;rsquo;s Route53 DNS management service&lt;/a&gt;. However, there is little to no documentation provided on how to set it up properly and especially about setting up the &lt;a href=&#34;http://aws.amazon.com/iam/&#34;&gt;relevant IAM access policies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I went to the &lt;a href=&#34;https://github.com/pfsense/&#34;&gt;pfSense repository on GitHub&lt;/a&gt; and browsed the code in order to find out how much access the plugin needed in order to do its deed.&lt;/p&gt;

&lt;p&gt;As it turns out: not much. The following IAM policy will grant the plugin the required permissions to access Route53 on your behalf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Statement&amp;quot;:[
    {
      &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;:[
        &amp;quot;route53:ChangeResourceRecordSets&amp;quot;,
        &amp;quot;route53:ListResourceRecordSets&amp;quot;
      ],
     &amp;quot;Resource&amp;quot;:&amp;quot;arn:aws:route53:::hostedzone/&amp;lt;your-hosted-zone-id&amp;gt;&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;&amp;lt;your-hosted-zone-id&amp;gt;&lt;/code&gt; which you need to exchange for the ID your zone has been assigned to within Route53.&lt;/p&gt;

&lt;p&gt;What the dynamics DNS module within pfSense actually does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect to the AWS API and look up all the records within the zone you configured&lt;/li&gt;
&lt;li&gt;Determines whether there is a record by the name you entered

&lt;ul&gt;
&lt;li&gt;If there is it deletes the record and adds it back with the new IP address attached to it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note: This is also why it is very wise to chose a very low (&amp;lt;= 60 seconds) TTL for your dynamic DNS record&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If there isn&amp;rsquo;t it creates a new record and attaches the IP address to it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Saves the IP address it just set within Route53 to a file within the pfSense environment to make sure it doesn&amp;rsquo;t update the same record twice

&lt;ul&gt;
&lt;li&gt;The IP either gets updated when the locally recorded IP address doesn&amp;rsquo;t match the record on Route53 or every 25 days&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that the A record should get updated automatically each time the IP changes on the associated interface.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>